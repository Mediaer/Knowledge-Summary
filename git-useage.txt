###### 应用文件变动 ######
git apply xx.diff


###### git 提交omx库代码示例 ######
git remote add gerrit ssh://user@scgit.xxx.com:29418/av-restricted/platform/hardware/google/omx
repo sync . (更新当前代码库)
git add drivers/display/osd/osd_fb.c
git commit --amend       (shift+;  wq)
git push gerrit HEAD:refs/for/master(master可替换成你准备提交到的分支)


>>>>>>>>>>>>>>>>>>>>>>>>> git 撤销操作 >>>>>>>>>>>>>>>>>>>>>>>
（1）丢弃工作区的修改：git checkout -- filename
 (2) 修改了工作区的某一个文件内容，还添加到了暂存区，想要丢弃，分两步：a. 使用命令 git reset HEAD filename, 回到（1），然后按（1）操作
（3）已经提交不合适的修改到版本库，如果撤销，可以在没有推送到远程仓库时 回退版本: git reset --hard commit_id


  git checkout .                 ##本地所有修改但是并未commit,都返回到原始状态
  git stash                      ##把所有并未commit的修改暂存到stash里面，可使用 git stash pop 恢复
  git reset --hard  commit-id    ##返回到某一个节点，不保留修改
  git reset --soft  commit-id    ##返回到某一个节点，保留修改

  git branch -D xx               ##删除某一分支

<<<<<<<<<<<<<<<<<<<<<<<< git 撤销操作 <<<<<<<<<<<<<<<<<<<<<<<<

//gerrit code review
http://wiki-china.google.com/Platform/Kernel/3.14/Porting_Guide

1. 切换到待提交的分支
2. git pull
3. git add /your/file
4. git commit -s
5. git push /remote/branch
6. add code reviewer


<<<<<<<<<<<<<<<<<< 修改已commit的作者和邮箱名 <<<<<<<<<<<<<<<<<<

第一步：前往需要修改的版本
1、使用 git log 获取需要修改的版本id
2、使用 git reset –soft [版本号] 前往版本

第二步：修改信息
使用  git commit --amend --author='用户名 <邮箱>' 修改
在打开的文件中保存一下就可以了

第三步：提交代码
使用 git push

<<<<<<<<<<<<<<<<<<<<<<<<<< git忽略某一文件 <<<<<<<<<<<<<<<<<<<<<<<<<<<<

在版本库中创建.gitignore文件，将不需要跟踪的文件添加到该文件中,然后在
git status时不会再提示跟踪 .gitignore 中的文件


<<<<<<<<<<<<<<<<<<<<<<<<<< git中删除文件 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
在被 git 管理的目录中删除文件时，可以选择如下两种方式来记录删除动作：
一、rm + git commit -am "abc"
二、git rm + git commit -m "abc"

//跟踪某一分支
git checkout branch_to_pull -t 


###################### 分支操作 ######################
1. 如果在两个不同的分支之中，对同一个文件的同一个部分进行了不同的修改，Git没法干净的合并它们
任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突
解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突

<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
please contact us at support@github.com
</div>
>>>>>>> iss53:index.html

这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置，因为你在运行 merge 命令的时候已经检出
到了这个分支）在这个区段的上半部分（======= 的上半部分），而 iss53 分支所指示的版本在 ======= 的
下半部分。 为了解决冲突，你必须选择使用由 ======= 分割的两部分中的一个，或者你也可以自行合并这些内
容

2. 删除某一分支
git branch -d  "branch_name"

3.


###################### git 删除操作 ######################
//rm 只是删除工作区，未“提交”, 没有删除暂存区的文件
rm test.txt
//git rm 相当于执行了两步
rm test.txt       --> 删除工作区内容
git add test.txt  --> 更新到暂存区











