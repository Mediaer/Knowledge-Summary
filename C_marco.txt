#, ##, __VA_ARGS__  的用法

----------------------------------------------------------------------------------------------------------
1. #

假如希望在字符串中包含宏参数，ANSI C允许这样作，在类函数宏的替换部分，#符号用作一个预处理运算符，它可以把语言符号转化为字符串。
例如，如果x是一个宏参量，

#x可以把参数名转化成相应的字符串

该过程称为字符串化（stringizing）.

#incldue <stdio.h>
#define PSQR(x) printf("the square of" #x "is %d\n", (x)*(x))
int main(void)
{
    int y =4;
    PSQR(y); //这里#x就是将宏参数y变为字符串y
    PSQR(2+4); //这里#x就是将宏参数2+4变为字符串"2+4"
    return 0;
}
输出结果：
the square of y is 16.
the square of 2+4 is 36.
第一次调用宏时使用“y”代替#x；第二次调用时用“2+4"代#x

----------------------------------------------------------------------------------------------------------

2. ##

##运算符可以用于类函数宏的替换部分。另外，##还可以用于类对象宏的替换部分。这个运算符把两个语言符号组合成单个语言符号
例如：
	#define XNAME(n) x##n
这样宏调用：
	XNAME(4)
展开后：
	x4


---------------------------------------------------------------------------------------------------------

3. __VA_ARGS__

可变参数宏 ... 和 __VA_ARGS__

__VA_ARGS__ 是一个可变参数的宏,这个可变参数的宏是新的C99规范中新增的，
目前似乎只有gcc支持（VC6.0的编译器不支持）

实现思想就是:
宏定义中参数列表的最后一个参数为省略号（也就是 ...）
这样预定义宏_ _VA_ARGS_ _就可以被用在替换 ... 所代表的字符串

写法举例：
#define PR1(...) 		printf(__VA_ARGS__)
#define PR2(fmt, ...)	printf(fmt, __VA_ARGS__)     
                            //可变参数部分需要参数，比如PR2("This is PR2 %d", 2), 
							//PR2("This is PR2") 报错
#define PR3(fmt, ...)	printf(fmt, ##__VA_ARGS__)   
                            //可变参数部分可以什么都不传入，比如PR3("This is PR3")
							//##__VA_ARGS__ 意为可以将 printf(fmt, ##__VA_ARGS__) 转变为 printf(fmt)

另外一种可变参数写法：

#define PR_A(arg...)			printf(arg)
#define PR_B(fmt, arg...)		printf(fmt, arg)
#define PR_C(fmt, arg...)		printf(fmt, ##arg)

-----------------------------------------------------------------------------------------------------

4. 使用宏来自定义log打印，用到第3部分知识

写法一：

#define  LOGI(...) 				\
    do {          				\
        printf(__VA_ARGS);		\
    } while (0)

写法二：

#define  LOGI(fmt, ...) 				\
    do {          						\
        printf(fmt, ##__VA_ARGS);		\
    } while (0)

写法三：

#define  LOGI(fmt, ...) 				\
    do {          						\
        printf(fmt, __VA_ARGS);			\
    } while (0)

写法四：

#define  LOGI(fmt, ...) 						\
    do {          								\
        printf("FILE:%s,FUN:%s, LINE:%d"fmt,    \
        	__FILE__,							\
        	__FUNC__,							\
        	__LINE__,							\
        	##__VA_ARGS);						\
    } while (0)

有段时间一直不理解，LOGI(fmt, ...) 为什么可以扩展printf() 中的一大堆参数("FILE:%s,FUN:%s, LINE:%d")，
这个例子中，要理解C语言的格式化输出，格式化和输出一一对应即可，

第一个 %s   对应  __FILE__
第二个 %s   对应  __FUNC__
第三个 %d   对应  __LINE__
第四个 fmt  对应  ##__VA_ARGS__

需要注意的是 "FILE:%s,FUN:%s, LINE:%d"fmt  这一串需要在一个逗号(,)之前

printf标准用法就是：
printf(fmt, ...)  //【fmt】是格式化 【...】 是输出

printf("%d" "%d", 2018, 2019)  //好比这种写法



































































