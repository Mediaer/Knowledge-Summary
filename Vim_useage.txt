
------------------------------------------------------------------------------------------------

i                insert模式，按ESC回到Normal模式
x                删除当前光标所在的一个字符
:wq              保存+退出（w:保存，q:退出）
dd               删除当前行，并把删除的行存放到剪贴板里
p                粘贴剪切板

hjkl             左下上右
:help <command>  显示相关命令帮助

VIM的Normal模式下，所有的键就是功能键，例如，一般Ctrl+c表示拷贝，按下ctrl后，c就不再是c本意了

------------------------------------------------------------------------------------------------

1.插入模式

  a        在光标后插入
  o(小写)        在当前行后插入一个新行
  O(大写)        在当前行前插入一个新行
  cw       替换从光标所在位置后到一个单词结尾的字符

2.简单的移动光标
  0        数字0，移动到行头
  ^        到本行第一个不是blank字符的位置（空格、tab、换行、回车等）
  g_       到本行最后一个不是blank 字符的位置
  $        到本行行尾
  /pattern 搜索pattern的字符串，如果有多个匹配选项，按n向下选择

3.拷贝/粘贴
  p(小写)        在当前位置之后粘贴
  P(大写)        在当前位置之前粘贴
  yy             拷贝当前行，等于 ddP

4.撤消操作
  u                 undo
  ctrl+r            redo

5.打开/保存/退出/改变文件
  :e <path/to/file>         打开一个文件
  :w                        存盘
  :saveas <path/to/file>    另存为<path/to/file>
  :x                        保存并退出
  ZZ                        保存并退出
  :wq                       保存并退出
  :q!                       退出不保存
  :bn 和 :bp                在打开的多个文件之间来回切换

6.打开一个文件的同时并跳转到某一行
  vim filename +n

------------------------------------------------------------------------------------------------

.            重复上一次命令
N<command>   重复某个命令N次

--------------------------------------------------------------------------------------------------

NG           到第N行， ：137(到137行)
gg           到第一行，相当于(1G)或者(:1)
G            到最后一行

按单词移动：
   w      到下一个单词的开头
   e      到下一个单词的结尾

-------------------------------------------------------------------------------------------------

%       匹配括号移动，包括 (,{,[
*和#    匹配光标当前所在的单词，移动光标到下一个(*)或者上一个(#)单词


------------------------------------------------------------------------------------------------

你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：

<start position><command><end position>

例如 0y$ 命令意味着：

0 → 先到行头
y → 从这里开始拷贝
$ → 拷贝到本行最后一个字符
你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。

你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。

还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：

d (删除 )
v (可视化的选择)
gU (变大写)
gu (变小写)
等等
（陈皓注：可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）
                      

在 Insert 模式下，你可以输入一个词的开头，然后按 <C-p>或是<C-n>，自动补齐功能就出现了……





终极技能！！！
------------------------------------------------------------------------------------------------

在当前行上移动光标: 0 ^ $ f F t T , ;
0 → 到行头
^ → 到本行的第一个非blank字符
$ → 到行尾
g_ → 到本行最后一个不是blank字符的位置。
fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。
t, → 到逗号前的第一个字符。逗号可以变成其它字符。
3fa → 在当前行查找第三个出现的a。
F 和 T → 和 f 和 t 一样，只不过是相反方向。
还有一个很有用的命令是 dt" → 删除所有的内容，直到遇到双引号—— "

--------------------------------------------------------------------------------------------------

区域选择 <action>a<object> 或 <action>i<object>
在visual 模式下，这些命令很强大，其命令格式为

<action>a<object> 和 <action>i<object>

action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)。
object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。也可以是一个特别的字符："、 '、 )、 }、 ]。
假设你有一个字符串 (map (+) ("foo")).而光标键在第一个 o 的位置。

vi" → 会选择 foo.
va" → 会选择 "foo".
vi) → 会选择 "foo".
va) → 会选择("foo").
v2i) → 会选择 map (+) ("foo")
v2a) → 会选择 (map (+) ("foo"))

--------------------------------------------------------------------------------

块操作: <C-v>
块操作，典型的操作： 0 <C-v> <C-d> I-- [ESC]

^ → 到行头
<C-v> → 开始块操作
<C-d> → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)
I-- [ESC] → I是插入，插入“--”，按ESC键来为每一行生效。

---------------------------------------------------------------------------------

宏录制： qa 操作序列 q, @a, @@
qa 把你的操作记录在寄存器 a。
于是 @a 会replay被录制的宏。
@@ 是一个快捷键用来replay最新录制的宏。
示例

在一个只有一行且这一行只有“1”的文本中，键入如下命令：

qaYp<C-a>q→
qa 开始录制
Yp 复制行.
<C-a> 增加1.
q 停止录制.
@a → 在1下面写下 2
@@ → 在2 正面写下3
现在做 100@@ 会创建新的100行，并把数据增加到 103.

---------------------------------------------------------------------------------

可视化选择： v,V,<C-v>
前面，我们看到了 <C-v>的示例 （在Windows下应该是<C-q>），我们可以使用 v 和 V。一但被选好了，你可以做下面的事：

J → 把所有的行连接起来（变成一行）
< 或 > → 左右缩进
= → 自动给缩进 （陈皓注：这个功能相当强大，我太喜欢了）

---------------------------------------------------------------------------------

在所有被选择的行后加上点东西：

<C-v>
选中相关的行 (可使用 j 或 <C-d> 或是 /pattern 或是 % 等……)
$ 到行最后
A, 输入字符串，按 ESC。

----------------------------------------------------------------------------------

分屏: :split 和 vsplit.
下面是主要的命令，你可以使用VIM的帮助 :help split. 你可以参考本站以前的一篇文章VIM分屏。

:split → 创建分屏 (:vsplit创建垂直分屏)
<C-w><dir> : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。
<C-w>_ (或 <C-w>|) : 最大化尺寸 (<C-w>| 垂直分屏)
<C-w>+ (或 <C-w>-) : 增加尺寸

--------------------------------------------------------------------------------









