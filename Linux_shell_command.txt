###### cp命令总结 ###### 
-u, --update
copy only when the SOURCE file is newer than the destination file or when the destination file is missing

###### export命令总结 ######
用于设置或者显示变量
在shell中执行程序时，shell会提供一组环境变量。export可新增，修改或删除环境变量，供后续执行的程序使用。export的效力仅基于该次登陆操作
export -p ：打印shell赋予程序的环境变量

###### alias命令总结 ######
alias ll='ls -l'  //为ll起别名
unalias ll        //取消ll别名

保存别名配置：
在 /etc/profile 中添加
在 ~/.bash_profile 中添加

###### sed命令总结 ###### 

###### awk命令总结 ######
###### grep命令总结 ######
###### tee命令总结 ######
###### indent命令总结 ######

###### mkdir #########
mkdir -p $HOME/go_projects/{src,pkg,bin}

ctrl + r //反向搜索历史输入命令


###### pushd、popd、dirs命令总结 ######
pushd：
1.每次pushd命令执行完成之后，默认都会执行一个dirs命令来显示目录栈的内容
2.目录栈的栈顶永远存放的是当前目录
3.pushd不带任何参数执行的效果就是 cd - ，栈顶两个目录互相切换
4.pushd +n切换到目录栈中的第n个目录，并将该目录以栈循环的方式推到栈顶

dirs:
  -v  每行显示一条记录，同时展示该记录在栈中的index
  -c  清空目录栈
  
###### 构建基本脚本 ######
1. 用户变量
   var1=10
   var2=12
在变量,等号,和值之间不能出现空格
2. 命令替换
两种方法将命令输出赋给变量
 #1 反引号字符(`)
    testing=`date`   //将date命令的输出赋值给testing
 #2 $()格式
    testing=$(date)  //将date命令的输出赋值给testing
    today=$(date +%y%m%d) //告诉date将日期显示为两位数的年月日组合,比如:180811

3. 输出重定向
  who > test //重定向who命令输出结果到test
  如果输出文件已经存在,重定向操作符会使用新的数据覆盖已有文件
  如果不想覆盖文件原有内容,可以追加到已有文件, (>>)来追加数据

4. 执行数学运算
 #1 expr 命令
   expr 5 \* 2  //注意转义符的使用
 
将数学运算结果赋值给一个变量有两种方法:
var1=10
var2=20
var3=$(expr $var2 / $var1)
echo The result is $var3
这种方法需要使用命令替换来获取expr的运算结果,另一种较为简便的方法为

在bash中,可以将一个数学运算结果赋值给某一个变量,使用美元符和方括号, $[operation] 将数学表达式围起来
var1=10
var2=20
var3=$[$var2 / $var1]

###### shell结构化命令 ######
1.基本结构1 
if command
then
    commands
fi

bash shell的if语句后面命令.如果退出状态码是0(表示执行成功),位于then后面的命令就会执行,否则不执行
另外一种形式:
if command; then
    commands
fi
****************************
if command
then
   commands
else
   commands
fi
****************************
if command
then
   commands
elif command2
then
   more commands
fi
****************************

if-then语句不能测试命令退出码之外的条件,可以使用test命令来扩充

****************************
if test condition    //条件成立,test命令退出返回状态码0,否则退出返回非0退出状态码
then
    commands
fi
****************************
test可以测试三类条件:
@ 数值比较  (eq,ge,gt,le,lt,ne)
@ 字符串比较 (=, !=, < , >, -n(字符长度是否非0), -z(字符长度是否为0))
@ 文件比较


2. 基本结构2

for命令:
//////////////////////
for var in list
do
	commands
done
//////////////////////
for (( i=1; i <= 10; i++))
do
    echo "The next number is $i"
done
//////////////////////

while 命令:
///////////////////////
while test command
do
   other commands
done
//////////////////////
while [$var1 -gt 0]
do
   echo $var1
   var1=$[ $var1 - 1 ]
done
///////////////////////


处理循环的输出:
在shell中,可以对循环的输出使用管道或者重定向

for file in /home/rich/*
  do
    if [ -d '$file' ]
    then
       echo "$file is a dit=rectory"
    elif
       echo "$file is a file"
    fi
done > output.txt


/////////////////////////////// Linux隐藏命令操作历史 /////////////////////////////////////
1. 在命令前插入空格，这条命令会被shell忽略，前提是环境变量 HISTCONTROL 设置为"ignorespace"或者"ignoreboth"才会起作用
如果不生效，环境变量需要设置一下，export HISTCONTROL = ignorespace

2. 一劳永逸的做法是：使用软链接，history记录都是存放在 ~/.bash_history文件中，那么我们就可以将写入 ~/.bash_history转移到其他地方

ln -s /dev/null ~/.bash_history   //这样都写入到 /dev/null

恢复history正常做法：

rm -rf ~/.bash_history

注意不是：

rm -rf ~/.bash_history/

如果结尾有"/"，那么源文件也会被删除，只删除软连接的话，不能加"/"

//////////////////////////////// 配置环境变量并使之生效 ///////////////////////////////////////////
主要两个命令：export、source

export LD_LIBRARY_PATH=/home/ubuntu/opencv-3.1.0/lib:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=/home/ubuntu/opencv-3.1.0/lib/pkgconfig:$PKG_CONFIG_PATH

source ~/.bashrc

//////////////////////////////// screen命令 ///////////////////////////////////////////
//打开会话
screen "name"
//浏览当前的screen会话
screen -ls
//关闭screen会话
screen -X -S name quit
//恢复上次的screen对话
screen -ls
There are screens on:
7880.session    (Detached)
7934.session2   (Detached)
7907.session1   (Detached)
3 Sockets in /var/run/screen/S-root.

screen -r
screen -r 7934
screen -r -S session2

//////////////////////////////// Macro useage ///////////////////////////////////////////
//A is true and B is false
#define CHECK1(A,B,...) if ((A)&&!(B)) { printf(__VA_ARGS__); }  // ... 用 __VA_ARGS__ 来代替
// #, ##
使用#把宏参数变为一个字符串,用##把两个宏参数贴合在一起
宏定义里有用'#'或'##'的地方宏参数是不会再展开
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Usage one xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
我们使用#把宏参数变为一个字符串,用##把两个宏参数贴合在一起. 
用法: 
#include<cstdio> 
#include<climits> 
using namespace std; 
#define STR(s)     #s 
#define CONS(a,b)  int(a##e##b) 

int main() 
{ 
    printf(STR(vck));           // 输出字符串"vck" 
    printf("%d ", CONS(2,3));  // 2e3 输出:2000 
    return 0; 
} 
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Usage two xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
二、当宏参数是另一个宏的时候 
需要注意的是凡宏定义里有用'#'或'##'的地方宏参数是不会再展开.
1, 非'#'和'##'的情况 
    #define TOW      (2) 
    #define MUL(a,b) (a*b) 
printf("%d*%d=%d ", TOW, TOW, MUL(TOW,TOW)); 
这行的宏会被展开为： 
    printf("%d*%d=%d ", (2), (2), ((2)*(2))); 
MUL里的参数TOW会被展开为(2). 


2, 当有'#'或'##'的时候 
    #define A          (2) 
    #define STR(s)     #s 
    #define CONS(a,b)  int(a##e##b) 
    printf("int max: %s",  STR(INT_MAX));    // INT_MAX #include<climits>
这行会被展开为： 
    printf("int max: %s", "INT_MAX"); 
    printf("%s", CONS(A, A));               // compile error 
这一行则是： 
    printf("%s", int(AeA)); 
INT_MAX和A都不会再被展开, 然而解决这个问题的方法很简单. 加多一层中间转换宏. 
加这层宏的用意是把所有宏的参数在这层里全部展开, 那么在转换宏里的那一个宏(_STR)就能得到正确的宏参数. 
    #define A           (2)
    #define _STR(s)     #s 
    #define STR(s)      _STR(s)          // 转换宏 
    #define _CONS(a,b)  int(a##e##b) 
    #define CONS(a,b)   _CONS(a,b)       // 转换宏 
    printf("int max: %s", STR(INT_MAX));          // INT_MAX,int型的最大值，为一个变量 #include<climits>
输出为: int max: 0x7fffffff 
STR(INT_MAX) -->  _STR(0x7fffffff) 然后再转换成字符串； 
printf("%d", CONS(A, A)); 
输出为：200CONS(A, A)  -->  _CONS((2), (2))  --> int((2)e(2))
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Linux查看系统状态
//查看系统运行时间
uotime
//查看已登录用户
who
//查看系统版本相关信息
uname
//查看当前环境变量
export
//查看目录和文件占用空间
du -h --max-depth=1 //查看当前目录下每个目录及文件占用空间，--max-depth显示层级
//查看各挂载点空间
df
//查看内存使用情况
free
//查看进程内存使用情况
pmap  pid
//查看进程之间的关系
pstree

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
使用gcc生成可执行文件 gcc -g -o cmdTest cmdTest.c

//查看文件基本信息
file cmdTest

//查看程序依赖库
ldd  cmdTest

//查看函数或者全局变量是否存在于elf文件中
nm cmdTest | grep test

//查看各段大小
size cmdTest 
    data段：包含静态变量和已经初始化的全局变量的数据段字节数大小
    bss段：存放程序中未初始化的全局变量的字节数大小

//查看elf文件信息
readelf -h cmdTest

//反汇编
objdump -d cmdTest

//定位crash问题
addr2line -e cmdTest 40053d(出错地址)

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx shell执行顺序 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
1. ";"
cmd1;cmd2 //命令之间没有逻辑关系，按先后顺序执行，命令都会执行到，cmd1失败会继续cmd2

2. "&&"
cmd1 && cmd2 //按顺序从前往后执行，但只有cmd1正确执行才会继续cmd2, "$?"保存命令执行结果是否正确

3. "||"
cmd1 || cmd2 //按照顺序执行，但是如果cmd1成功，不会执行cmd2，cmd1不成功则执行cmd2

"&&" 和 "||" 都是短路开关

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  shell父子进程关系  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

进程列表：

pwd; ls; cd /etc; pwd; cd ; ls     //命令可以依次执行
(pwd; ls; cd /etc; pwd; cd ; ls)   //包含在括号中，就是进程列表，会生成一个子shell进程执行命令
(cmd) //命令分组，创建子进程执行
{cmd;} //命令分组，不创建子进程执行

在shell脚本中，经常使用子shell进行多进程处理，但是过多的子进程会明显拖慢处理速度，在交互式CLI shell中
，子shell存在同样问题，它并非真正的多进程，因为终端控制子shell的I/O

后台模式中执行命令可以在处理命令的同时让出CLI,以供其他交互命令执行，好比将前台操作界面让出来，执行其他操作

shell子进程除了让出终端，还有什么好处？


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Linux文件权限 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
1. 添加新用户
useradd
2. 删除用户
userdel
3. usermod
修改/etc/passwd中的大部分字段
4. 创建新组
groupadd
5. 修改组
groupmod

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Linux数据呈现 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Linux文件描述符
0   STDIN   标准输入
1   STDOUT  标准输出
2   STDERR  标准错误

<  输入重定向符号，Linux会重定向到指定的文件来替换标准输入文件的描述符
>  输出重定向符号，Linux会重定向原本显示在显示器上的内容到重定向文件
>> 追加文件

使用实例：
ls -al testfile  2>logErr 1>logNormal  //将STDERR重定向到logErr文件，STDOUT重定向到log文件

ls -al testfile &>log  //将STDERR和STDOUT重定向到同一个输出文件，错误显示在log中靠前位置

ls -al testfile >&2  //重定向到文件描述符，在文件描述符前面添加&

ls -al testfile >/dev/null  //什么都不输出

cat  /dev/null  > testfile   // 由于/dev/null不包含任何文件，可以用来快速清除文件

date | tee testfile      //输出到STDOUT，同时输出到testfile文件
date | tee -a testfile   //同上，同时表示追加到文件

./test.sh &   //后台运行脚本，但是仍然会使用显示器来显示STDOUT、STDERR信息

//每次启动新作业时，Linux系统都会为其分配一个新的作业号和PID，在终端会话中使用后台进程需要注意
//每一个后台进程都和终端会话(pts/0)联系在一起，如果终端退出，后台进程随之也会退出

//即使退出终端也可以后台运行的办法
//nohup命令会运行一个命令来阻止所有发送给该进程的SIGHUP信号，这会在退出终端会话时阻止进程退出

nohup ./test.sh &  //nohup会解除终端和进程的关联，进程也就不再同STDOUT和STDERR联系在一起

//定时运行脚本命令
at、cron表
 
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Linux后台任务管理 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  
1. &

watch  -n 10 sh  test.sh  &  //每10s在后台执行一次test.sh脚本

2. jobs

查看当前有多少在后台运行的命令
jobs -l //显示所有任务的PID
jobs的状态：running, stopped, Terminated
但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识

3. fg

可将后台中的命令调至前台继续运行，如果有多个命令使用：

fg % job_number(命令编号) 将选中的命令调出

例如：
[1]-   Stopped  watch -n 3 sh del.sh
[2]+   Stopped  watch -n 3 date
[3]    Running  nohup watch -n 3 date &

4. bg

将一个在后台暂停的命令，变成在后台继续执行
如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出

5. kill

法子1：通过jobs命令查看job号（假设为num），然后执行kill %num
法子2：通过ps命令查看job的进程号（PID，假设为pid），然后执行kill pid

前台进程的终止：Ctrl+c

6. Ctrl + z

可以将一个正在前台执行的命令放到后台，并且处于暂停状态, bg命令可以使其继续在后台执行


==================================== Linux进程 ========================================
1.strace
2.pstack
3.pstree
4.gdb
5. /proc/pid/xxx,包含很多进程相关的信息
/proc/pid/environ：包含了进程的可用环境变量的列表
/proc/pid/fd：包含了进程打开的每一个文件的来链接
/proc/pid/stat：包含了进程的所有状态信息、进程号、父进程号等
/proc/pid/cmdline：保存了进程的完成命令
/proc/pid/cwd：符号连接，指向进程当前的工作目录
/proc/pid/exe：符号连接，指向正在进程中运行的程序
/proc/pid/mem：包含了进程在内存的内容
/proc/pid/statm：包含了进程的内存使用信息


================================== 软、硬链接 ==========================================

* 符号连接(软连接)
软连接本身就是一个实实在在的文件，有它自己的inode，它指向存放在虚拟目录结构中某个地方的另一个文件，相当于window系统
中的快捷方式，它只对链接的文件负责，可以跨文件系统

ln  -s   src_file   des_file //des_file为软链接文件名，

* 硬链接

ln  src_file  des_file //des_file为硬链接文件名，本质上是同一个文件

src_file、des_file相当于指针，都指向磁盘某块存储区间，通过这两个文件名的修改操作都会同步到这块区间
硬链接不能跨文件系统，硬链接指向某一文件系统的物理区域，跨到另一文件系统无法识别








