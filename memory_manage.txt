###### 常见内存错误 ######

（1）内存未分配成功，却使用了它
解决办法：使用之前检查指针是否为NULL, 如果指针p是函数的参数，在函数的入门处使用assert(p!=NULL)进行检查
如果是使用malloc或者new来申请，使用 if (p==NULL) 或者 if (p!=NULL)进行错误预防
（2）内存分配成功，但是尚未初始化就引用
（3）内存分配成功并且已经初始化，但操作越过了内存的边界
例如：数组下标多1或者少1
（4）忘记释放内存，却继续使用
动态内存的申请与释放必须配对，malloc与free的次数保持一致
（5）释放了内存却继续使用
程序中的对象调用关系过于复杂，难以分析某个对象是否已经释放了内存；函数的return语句写错了，不要返回指向"栈内存"的指针或引用；
使用free或delete释放了内存后，没有将指针设置为NULL,导致野指针

###### 野指针产生原因 ######

（1）指针变量没有被初始化
任何指针变量创建时不会自动成为NULL,它的值是随机的，创建时要么设置为NULL,要么指向合法的内存
例如：char *ptr = NULL; char *str = (char *)malloc(100)
（2）指针p被free或delete之后，没有设置为NULL,误以为认识合法指针
（3）指针操作超越了变量的作用范围


